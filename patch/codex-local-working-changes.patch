diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 4cc19b6..f2f72ab 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -30,13 +30,10 @@ jobs:
           python-version: "3.11"
           cache: "pip"  # speed up pip installs
 
-      - name: Install lint/format tooling
+      - name: Install dev dependencies
         run: |
           python -m pip install --upgrade pip
-          pip install "ruff>=0.6" black isort
-          ruff --version
-          black --version
-          isort --version
+          pip install -r requirements-dev.txt
 
       - name: Ruff (lint)
         run: ruff check . --output-format=github
@@ -47,6 +44,12 @@ jobs:
       - name: isort (import order check)
         run: isort . --check-only
 
+      - name: Pytest (unit)
+        run: pytest tests/unit --maxfail=1 --disable-warnings -q
+
+      - name: Pytest (smoke)
+        run: pytest tests/smoke --maxfail=1 --disable-warnings -q
+
       # Thin, non-destructive smoke: compile all .py files.
       # This catches syntax errors across the repo without running the app,
       # touching the network, or requiring secrets/DB access.
diff --git a/.gitignore b/.gitignore
index dc30425..71c8c5b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,9 +3,11 @@
 __pycache__/
 *.pyc
 .env
-data/
+data/*
+!data/sample/
+!data/sample/**
 .streamlit/secrets.toml
 shortcuts/
 backups/
 schema/archive/
-*.Zone.Identifier
\ No newline at end of file
+*.Zone.Identifier
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 922e6ab..5e9dafa 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -15,6 +15,16 @@ The format follows [Keep a Changelog](https://keepachangelog.com/en/1.1.0/) and
 - **Reverted:** 2 change(s)
 - **Other:** 10 change(s)
 
+### Added
+- Unit and smoke test scaffolds under `tests/` with lightweight fixtures for CI.
+
+### Documentation
+- Phase-1 operational docs: repo structure, migrations discipline, first-run and smoke runbooks, specs index.
+- Refreshed README to highlight MVP workflows and doc entry points.
+
+### Chore
+- CI workflow installs dev dependencies and executes unit/smoke pytest suites on PRs.
+
 ## [0.6.0] - 2025-09-16
 [Tag: mvp-0.6.0](https://github.com/mfortin014/mvp_menu_optimizer/releases/tag/mvp-0.6.0)
 
diff --git a/README.md b/README.md
index 50c00a6..a85c5e8 100644
--- a/README.md
+++ b/README.md
@@ -1,85 +1,99 @@
-# Menu Optimizer v1.1 â€“ README
+# Menu Optimizer â€” MVP Guide
 
-## Overview
-
-This MVP supports Chef's culinary consulting work by allowing them to manage and analyze recipes, ingredient costs, and performance. It is a prototype built in **Streamlit** using a **Supabase** backend. The project will later be migrated to a React + Supabase architecture inside the OpsForge platform.
+Menu Optimizer helps Chefâ€™s culinary consulting team track recipe costs, performance, and menu health. The MVP is delivered in **Streamlit** on top of **Supabase**. React/web workers arrive in v1.
 
 ---
 
-## Key Features
+## Quick Start (MVP)
+
+1. Follow the runbook: [First Clone â†’ First Run](docs/runbooks/first_run.md).
+2. Launch the app with staging credentials: `streamlit run Home.py`.
+3. Keep the quality gates green before opening a PR:
+   - `ruff check .`
+   - `black --check .`
+   - `isort . --check-only`
+   - `pytest tests/unit`
+   - `pytest tests/smoke`
+
+Need more detail? The docs index lives at [docs/README.md](docs/README.md).
+
+---
 
-### ðŸ¥¦ Ingredient Management
-- Add/Edit/Delete ingredients (soft delete only)
-- Yield percentage support (for post-prep loss)
-- Ingredient categories (linked to `ref_ingredient_categories`)
-- Clean layout with editable form sidebar and data editor
-- Radio-style selection behavior in the ingredient table
+## Documentation & Runbooks
 
-### ðŸ“„ Recipe Summary & Breakdown
-- View recipe performance from `recipe_summary`
-- Total cost, price, and margin calculation
-- Uses latest cost view logic with `yield_pct`
+### MVP now
+- [Project Bible (Index)](docs/README.md) â€” authoritative map of all docs.
+- [Repo Structure & Paths](docs/reference/repo_structure.md) â€” where things live.
+- [CI/CD Policies](docs/policy/ci_minimal.md) and [Migrations & Schema Discipline](docs/policy/migrations_and_schema.md).
+- [Smoke QA](docs/runbooks/smoke_qa.md) â€” staging checks and evidence.
+- [Specs Index](docs/specs/README.md) â€” templates and active specs.
 
-### ðŸ“Š MPM Quadrant (Menu Performance Matrix)
-- Visual graph (popularity vs profitability)
-- Table format with quadrant filter (coming soon)
+### v1 later
+- React client docs, ADRs, and production hardening runbooks move in once the platform migrates.
 
 ---
 
-## Tech Stack
+## Quality & CI
 
-- Frontend: [Streamlit](https://streamlit.io)
-- Backend: [Supabase](https://supabase.com)
-  - PostgreSQL
-  - RPC for recipe breakdown
-  - View logic for costing
+GitHub Actions runs on every PR (`.github/workflows/ci.yml`):
+- Ruff, Black, and isort in check mode.
+- Unit tests (`tests/unit/`) for pure logic and guardrails.
+- Smoke tests (`tests/smoke/`) that load lightweight fixtures only.
+- Syntax compilation sweep to catch regressions without hitting the network.
+
+Branch protection requires the `check` job to pass. Stage/production deploy choreography lives in the `ci` Phase-1 issue.
 
 ---
 
-## Dev Setup
+## Sample Data
 
-1. Clone this repo
-2. Create `.env` file or set `secrets.toml` in `.streamlit/`
-```env
-SUPABASE_URL=...
-SUPABASE_KEY=...
-```
-3. Install requirements
-```bash
-pip install -r requirements.txt
-```
-4. Run app:
-```bash
-streamlit run Home.py
-```
+- Lightweight fixtures for docs/tests: `data/sample/` (e.g., `ingredients.csv`).
+- Full Supabase export: `data/sample_data/2025-09-09/` (read-only, used for manual exploration).
+
+Never commit local edits to either directory; create new fixtures instead.
 
 ---
 
-## Project Structure
+## Project Structure (MVP excerpt)
 
 ```
 .
 â”œâ”€â”€ Home.py
-â”œâ”€â”€ pages/
-â”‚   â””â”€â”€ Ingredients.py
-â”œâ”€â”€ utils/
-â”‚   â”œâ”€â”€ data.py
-â”‚   â””â”€â”€ supabase.py
-â”œâ”€â”€ requirements.txt
-â”œâ”€â”€ .env
-â””â”€â”€ README.md
+â”œâ”€â”€ components/
+â”œâ”€â”€ data/
+â”‚   â”œâ”€â”€ sample/
+â”‚   â””â”€â”€ sample_data/
+â”œâ”€â”€ docs/
+â”œâ”€â”€ migrations/
+â”‚   â””â”€â”€ sql/
+â”œâ”€â”€ schema/
+â”‚   â”œâ”€â”€ current/
+â”‚   â””â”€â”€ releases/
+â”œâ”€â”€ tests/
+â”‚   â”œâ”€â”€ smoke/
+â”‚   â””â”€â”€ unit/
+â””â”€â”€ utils/
 ```
 
+See [Repo Structure & Paths](docs/reference/repo_structure.md) for the full breakdown and naming rules.
+
 ---
 
-## Known Issues / To Do
+## Tech Stack
+- Frontend: [Streamlit](https://streamlit.io)
+- Backend: [Supabase](https://supabase.com) (PostgreSQL + RPC)
+- Tooling: Ruff, Black, isort, Pytest
+
+---
+
+## Roadmap Snapshots
+
+- MVP: Streamlit app, Supabase staging/prod, manual deploys supported by runbooks.
+- v1: React front-end, automated deploy pipeline, richer analytics schemas.
 
-- Ingredient "Select" column behavior not fully radio-style yet
-- Recipe breakdown page still uses outdated cost logic
-- Ref tables management (e.g., categories, UOM) not yet exposed in UI
-- Inline editing in `st.data_editor` is currently disabled for validation consistency
+Track progress in GitHub Issues/Projects linked from the docs index.
 
 ---
 
 ## License
-MIT
\ No newline at end of file
+MIT
diff --git a/data/sample/ingredients.csv b/data/sample/ingredients.csv
new file mode 100644
index 0000000..0964ae6
--- /dev/null
+++ b/data/sample/ingredients.csv
@@ -0,0 +1,4 @@
+ingredient,unit_cost,currency
+Lemon,0.35,CAD
+Butter,1.20,CAD
+Shallot,0.18,CAD
diff --git a/docs/README.md b/docs/README.md
index 97a6a2c..59cd521 100644
--- a/docs/README.md
+++ b/docs/README.md
@@ -14,12 +14,14 @@ Repo = Library (durable truth). GitHub = Town Square (work-in-progress). OneDriv
 - [Branching & PR Protocol](policy/branching_and_prs.md) â€” trunk-based, Draft PRs, squash. [MVP]
 - [Conventional Commits & Changelog](policy/commits_and_changelog.md) â€” commit types, tags, CHANGELOG. [MVP]
 - [Minimal CI (Week 1)](policy/ci_minimal.md) â€” required checks and shape of Actions. [MVP]
+- [Migrations & Schema Discipline](policy/migrations_and_schema.md) â€” append-only SQL plus schema dump guardrails. [MVP]
 - [.github/PULL_REQUEST_TEMPLATE.md](../.github/pull_request_template.md) â€” intent-first structure. [MVP]
 
 ## Runbooks
 
+- [First Clone â†’ First Run](runbooks/first_run.md) â€” local setup, quality gates, Streamlit boot. [MVP]
+- [Smoke QA](runbooks/smoke_qa.md) â€” staging validation & evidence checklist. [MVP]
 - [Release Playbook](runbooks/release_playbook.md) â€” bump â†’ verify â†’ tag â†’ stage â†’ promote â†’ aftercare. [MVP]
-- First Run â€” (to be added in Phase 1). [MVP]
 - Rollback â€” (to be added in Phase 2). [v1]
 - [DB Security Hardening](runbooks/db_security_hardening.md)
 - [DB Backups](runbooks/db_backups_runbook.md)
@@ -31,13 +33,15 @@ Repo = Library (durable truth). GitHub = Town Square (work-in-progress). OneDriv
 
 ## Reference
 
+- [Repo Structure & Paths](reference/repo_structure.md) â€” directories youâ€™ll touch day-to-day. [MVP]
 - [Glossary](reference/glossary.md) â€” shared language across docs and PRs. [MVP]
 - Data Dictionary â€” add link under `docs/reference/` when ready. [MVP]
 - Events & Error Model â€” Phase 3. [v1]
 
 ## Specs / ADRs
 
-- Accepted specs live in `docs/specs/` (Phase 1 adds an index). [MVP]
+- [Specs Index](specs/README.md) â€” list of active specs, templates, and hygiene rules. [MVP]
+- Accepted specs live in `docs/specs/`. [MVP]
 - ADRs live in `docs/adr/` (template arrives in Phase 2). [v1]
 
 ## Work Tracking & Heavy Files (update these URLs)
diff --git a/docs/policy/migrations_and_schema.md b/docs/policy/migrations_and_schema.md
new file mode 100644
index 0000000..bcc3f7b
--- /dev/null
+++ b/docs/policy/migrations_and_schema.md
@@ -0,0 +1,56 @@
+# Migrations & Schema Discipline
+**Updated:** 2025-09-18 21:20
+
+Purpose: keep database drift under control while the MVP evolves. Pair with `dump_schema.sh` and the RLS specs before altering data models.
+
+---
+
+## Source of Truth
+
+### MVP now
+- **Migrations:** append-only SQL files under `migrations/sql/` named `V###__short_desc.sql`.
+- **Schema snapshot:** `schema/current/prod.schema.sql` reflects production after the most recent release.
+- **Release history:** each shipped version gets a frozen dump in `schema/releases/` (generated by `dump_schema.sh`).
+
+### v1 later
+- Managed migrations (Alembic/Flyway) and automated schema diffs will backfill GitHub discussions before execution.
+- Additional schema slices (analytics, reporting replicas) get their own directories and policies.
+
+---
+
+## Authoring a Migration
+
+### MVP now
+1. Create a new SQL file with the next sequence number (`V015__add_example_table.sql`).  
+2. Write **idempotent** statements: guard `CREATE` with `IF NOT EXISTS`, prefer views over data rewrites.  
+3. Include rollback notes in the file header comment (manual until we adopt reversible tooling).  
+4. Test locally against a disposable Supabase instance before opening a PR.  
+5. Document the change in the relevant spec or changelog entry.
+
+### v1 later
+- Codify forward/rollback scripts per migration and run them through automated CI sandboxes.  
+- Introduce migration linting (check for locks, `SET ROLE`, etc.).
+
+---
+
+## Refreshing Schema Dumps
+
+### MVP now
+- Never hand-edit files under `schema/`.  
+- After deploying a migration, run `./dump_schema.sh` pointing at production, then:
+  - Replace `schema/current/prod.schema.sql` with the new dump.
+  - Append a versioned copy to `schema/releases/` (e.g., `schema/releases/mvp-0.7.0.schema.sql`).
+- Keep prior dumps in `schema/archive/` (ignored by Git) if you need scratch history.
+
+### v1 later
+- Automate schema refresh on release tagging and attach dumps to GitHub Releases.  
+- Maintain per-environment snapshots (staging/prod) for diffing in CI.
+
+---
+
+## Data Safety
+
+- Avoid destructive ops (`DROP`, `DELETE`) unless the accompanying spec approves it.  
+- Seed data lives under `data/sample_data/`; the lightweight fixtures for tests live in `data/sample/` (no secrets).  
+- When altering reference data, update the relevant source `.md` documents (Data Dictionary, changelog).
+
diff --git a/docs/reference/repo_structure.md b/docs/reference/repo_structure.md
new file mode 100644
index 0000000..b5985e6
--- /dev/null
+++ b/docs/reference/repo_structure.md
@@ -0,0 +1,46 @@
+# Repo Structure & Paths
+**Updated:** 2025-09-18 21:15
+
+Purpose: quick map of the directories you will touch during Phase-1 work. Pair this with `docs/README.md` when you need the wider doc context.
+
+---
+
+## Top-Level Map
+
+### MVP now
+- `Home.py`, `pages/`, `components/`, `utils/` â€” Streamlit MVP surface area.
+- `data/sample/` â€” tiny, non-sensitive CSV fixtures used in docs and smoke tests.
+- `data/sample_data/` â€” larger Supabase export snapshots (do not commit edits).
+- `migrations/sql/` â€” ordered `V###__desc.sql` migrations (apply via Supabase/psql; never edit in place).
+- `schema/current/` â€” latest production schema dump (`prod.schema.sql`).
+- `schema/releases/` â€” tagged release snapshots (one file per shipped release).
+- `tests/unit/`, `tests/smoke/` â€” minimal test suites exercised by CI.
+- `docs/` â€” index, policies, runbooks, and specs (see `docs/README.md`).
+- `.github/workflows/` â€” GitHub Actions, including `ci.yml`.
+
+### v1 later
+- `apps/` (future React client) and `services/` (API workers) will join once the MVP graduates.
+- Additional schema slices (`schema/tenant/`, `schema/analytics/`) once the data model bifurcates.
+- Infra manifests (`infra/terraform/`, `helm/`) when we move to managed deployments.
+
+---
+
+## Naming Rules
+
+### MVP now
+- Use `snake_case` for filenames; avoid spaces.  
+- Migrations follow `V###__desc.sql` and live under `migrations/sql/` only.  
+- Release schema dumps are `schema/releases/<version>.schema.sql` (human-triggered via `dump_schema.sh`).
+
+### v1 later
+- Expect module splitting (`menu_optimizer/`) once we package the core library.  
+- Stable API docs will move into `docs/reference/api/` alongside typed client references.
+
+---
+
+## Editing Guardrails
+
+- Keep generated assets (`dist/`, `archive/`) read-only in Git.  
+- When adding new directories, update this file and `docs/README.md`.  
+- Coordinate cross-cutting refactors through specs (`docs/specs/`).
+
diff --git a/docs/runbooks/first_run.md b/docs/runbooks/first_run.md
new file mode 100644
index 0000000..5054290
--- /dev/null
+++ b/docs/runbooks/first_run.md
@@ -0,0 +1,72 @@
+# Runbook: First Clone â†’ First Run
+**Updated:** 2025-09-18 21:25
+
+Purpose: help a new contributor bootstrap the MVP locally in under 30 minutes.
+
+---
+
+## Prerequisites
+
+### MVP now
+- macOS/Linux with Python 3.11 available (`pyenv` recommended).
+- Access to Supabase credentials (`SUPABASE_URL`, `SUPABASE_ANON_KEY`) for staging or a personal sandbox.
+- GitHub access to clone the repository.
+
+### v1 later
+- Node 20+ (React client), Docker, and GitHub CLI for environment automation.
+
+---
+
+## 1. Clone the Repo
+```bash
+git clone git@github.com:mfortin014/mvp_menu_optimizer.git
+cd mvp_menu_optimizer
+```
+
+## 2. Create a Virtual Environment
+```bash
+python -m venv .venv
+source .venv/bin/activate
+pip install --upgrade pip
+```
+
+## 3. Install Dependencies
+```bash
+pip install -r requirements-dev.txt
+```
+This installs the Streamlit app, lint/test tooling, and smoke dependencies.
+
+## 4. Configure Environment Variables
+
+### MVP now
+1. Copy `.env.example` (or create `.env`) with Supabase keys.  
+2. Mirror the same values in `.streamlit/secrets.toml` if you prefer Streamlitâ€™s secrets store.  
+3. Do **not** commit credential files.
+
+### v1 later
+- Use `mise` or `direnv` to keep secrets scoped per environment.
+
+## 5. Pull Sample Data (Optional)
+- Lightweight fixtures: `data/sample/` (CSV) for tests and demos (e.g., `ingredients.csv`).  
+- Full Supabase dump: `data/sample_data/` for deeper local exploration (never edit in place).
+
+## 6. Run Quality Gates Locally
+```bash
+ruff check .
+black --check .
+isort --check-only .
+pytest tests/unit
+pytest tests/smoke
+```
+All commands should pass before pushing a branch.
+
+## 7. Launch the Streamlit App
+```bash
+streamlit run Home.py
+```
+Log in with staging credentials; confirm the dashboard loads and sample tenant data appears.
+
+## 8. Next Steps
+- Review `docs/README.md` for policies and runbooks.  
+- Open a feature branch (`git checkout -b feature/<slug>`).  
+- Align your work with the relevant spec in `docs/specs/`.
diff --git a/docs/runbooks/smoke_qa.md b/docs/runbooks/smoke_qa.md
new file mode 100644
index 0000000..a85bcd1
--- /dev/null
+++ b/docs/runbooks/smoke_qa.md
@@ -0,0 +1,45 @@
+# Runbook: Smoke QA
+**Updated:** 2025-09-18 21:28
+
+Purpose: rehearse the Golden Path on every deploy without touching production data.
+
+---
+
+## Scope
+
+### MVP now
+- Target environment: **staging** Supabase + Streamlit deployment.
+- Validation: GitHub Actions smoke tests (`pytest tests/smoke`) and a manual UI sanity check.
+
+### v1 later
+- Browser automation against staging + synthetic monitoring hooks in production.
+
+---
+
+## 1. Prepare Environment
+1. Confirm staging credentials in GitHub â†’ **Environments â†’ staging**.  
+2. Ensure the staging database has seed data (run the provisioning script or load `data/sample_data/2025-09-09`).
+
+## 2. Run Automated Smoke Tests
+```bash
+pytest tests/smoke
+```
+Expected: quick pass (<5s). Tests only import modules, check version metadata, and parse fixtures â€” no network hits.
+
+## 3. Manual UI Sanity Check
+1. Deploy the latest commit to staging (CI does this on merge to `main`).  
+2. Open the staging Streamlit URL.  
+3. Verify:
+   - App boots without auth errors.
+   - Ingredient list loads for the default tenant.
+   - Menu dashboard renders with data.
+
+## 4. Capture Evidence
+- Screenshot of staging app home screen.  
+- CI link showing the smoke job succeeded.  
+- Note any gaps in the runbook and log them in #DOCS_ISSUE.
+
+## 5. Escalate Issues
+- If automation fails â†’ create a bug issue and block deploy.  
+- If manual QA fails but smoke passes â†’ flag the gap and open a follow-up task.
+
diff --git a/docs/specs/README.md b/docs/specs/README.md
new file mode 100644
index 0000000..eaeb371
--- /dev/null
+++ b/docs/specs/README.md
@@ -0,0 +1,34 @@
+# Specs Index
+**Updated:** 2025-09-18 21:30
+
+Purpose: map the specs that govern the Menu Optimizer MVP. Use this index before starting any feature work.
+
+---
+
+## Active Specs
+
+### MVP now
+- `spec_template.md` â€” scaffolding for new specs (copy â†’ rename).  
+- `Menu_Optimizer_Specs.md` â€” master backlog and MVP scope (authoritative checklist).  
+- Component-specific specs live under `docs/specs/<area>/` when needed (e.g., `docs/specs/auth/login.Specs.md`).
+
+### v1 later
+- ADRs (`docs/adr/`) will link back once the architecture formalizes.  
+- Multi-repo specs will land here with cross-links into OpsForgeâ€™s platform docs.
+
+---
+
+## How to Add a Spec
+1. Copy `spec_template.md` to `docs/specs/<feature>.Specs.md`.  
+2. Fill the **Deliverables** checklist and **Testing** notes.  
+3. Reference related runbooks and policies.  
+4. Update this index and `docs/README.md` with the new link.  
+5. Tag the spec in GitHub issues/PRs.
+
+---
+
+## Hygiene
+- Keep filenames consistent (`<Feature>.Specs.md`).  
+- When a spec graduates to v1 scope, annotate sections with **MVP** vs **v1** callouts.  
+- Archive deprecated specs under `archive/specs/` (do not delete history).
+
diff --git a/requirements-dev.txt b/requirements-dev.txt
index d0899e9..b281a7e 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -3,3 +3,4 @@ ruff>=0.6
 black>=24.8.0
 isort>=5.13.2
 pre-commit>=3.7
+pytest>=8.3
diff --git a/tests/smoke/test_sample_data.py b/tests/smoke/test_sample_data.py
new file mode 100644
index 0000000..46b7465
--- /dev/null
+++ b/tests/smoke/test_sample_data.py
@@ -0,0 +1,19 @@
+from __future__ import annotations
+
+import csv
+from pathlib import Path
+
+
+def test_sample_ingredients_fixture_parses() -> None:
+    fixture = Path("data/sample/ingredients.csv")
+    assert fixture.exists(), "Expected sample ingredients fixture"
+
+    with fixture.open(encoding="utf-8") as handle:
+        rows = list(csv.DictReader(handle))
+
+    assert rows, "Fixture should contain at least one ingredient"
+    for row in rows:
+        assert row.get("ingredient"), "Every fixture row must have an ingredient"
+        assert row.get("unit_cost") not in (None, ""), "Every row needs a unit_cost"
+        # Ensure unit_cost looks numeric without casting (keeps test non-destructive)
+        assert set(row["unit_cost"]) <= set("0123456789."), "unit_cost should be numeric"
diff --git a/tests/unit/test_docs_index.py b/tests/unit/test_docs_index.py
new file mode 100644
index 0000000..f73c959
--- /dev/null
+++ b/tests/unit/test_docs_index.py
@@ -0,0 +1,14 @@
+from pathlib import Path
+
+
+def test_docs_index_links_phase_one_documents() -> None:
+    contents = Path("docs/README.md").read_text(encoding="utf-8")
+    expected_links = (
+        "runbooks/first_run.md",
+        "runbooks/smoke_qa.md",
+        "reference/repo_structure.md",
+        "policy/migrations_and_schema.md",
+        "specs/README.md",
+    )
+    missing = [link for link in expected_links if link not in contents]
+    assert not missing, f"docs/README.md is missing links: {missing}"
diff --git a/tests/unit/test_version.py b/tests/unit/test_version.py
new file mode 100644
index 0000000..7afe40c
--- /dev/null
+++ b/tests/unit/test_version.py
@@ -0,0 +1,7 @@
+from pathlib import Path
+import re
+
+
+def test_version_follows_semver() -> None:
+    version = Path("VERSION").read_text(encoding="utf-8").strip()
+    assert re.fullmatch(r"\d+\.\d+\.\d+", version), "VERSION must be semantic (X.Y.Z)"
