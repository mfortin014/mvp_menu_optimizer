name: Seed Project Items

on:
  push:
    paths:
      - ".github/project-seeds/pending/**.md"
  workflow_dispatch:

permissions:
  contents: write            # needed to open the consume-seeds PR
  issues: write
  pull-requests: write
  repository-projects: write # optional; GraphQL to Projects V2 usually works without it

concurrency:
  group: seed-${{ github.ref }}
  cancel-in-progress: true

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history so diffs work)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: List pending seed files (robust on first push & shallow clones)
        id: list
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          SEED_GLOB=".github/project-seeds/pending/**.md"

          # First push to a branch often has BEFORE all zeros or unset.
          if [ -z "${BEFORE}" ] || [ "${BEFORE}" = "0000000000000000000000000000000000000000" ]; then
            # List all tracked seeds in pending/
            git ls-files "${SEED_GLOB}" > seeds.txt || true
          else
            # Only files touched in this push → group the pipeline, then redirect once
            ( git diff --name-only "${BEFORE}" "${AFTER}" \
              | grep -E "^\.github/project-seeds/pending/.*\.md$" || true ) > seeds.txt
          fi

          echo "files=$(paste -sd, seeds.txt)" >> "$GITHUB_OUTPUT"
          echo "Seeds:"; cat seeds.txt || true

      # ▶ CREATE-ONLY: if an issue with this UID already exists, SKIP.
      - name: Create issues (create-only) and add to Project
        if: steps.list.outputs.files != ''
        id: create
        uses: actions/github-script@v7
        env:
          DEFAULT_PROJECT_URL: ${{ vars.PROJECT_URL }}       # repo Variable
          DEFAULT_ASSIGNEE:     ${{ vars.DEFAULT_ASSIGNEE }} # repo Variable (may be empty)
          FALLBACK_ASSIGNEE:    ${{ github.actor }}          # last resort
        with:
          script: |
            const core = require('@actions/core');
            const fs = require('fs');
            const path = require('path');

            const files = core.getInput('files').split(',').filter(Boolean);
            if (!files.length) { core.setOutput('created','[]'); return; }

            // Helpers
            function parseHeader(body) {
              const m = body.match(/<!--([\s\S]*?)-->/);
              if (!m) return { meta:{}, rest: body.trim() };
              const hdr = m[1];
              const meta = {};
              hdr.split('\n').forEach(line => {
                const L = line.trim();
                if (!L || L.startsWith('#')) return;
                const idx = L.indexOf(':'); if (idx < 0) return;
                const k = L.slice(0, idx).trim();
                let v = L.slice(idx+1).trim();
                try { meta[k] = JSON.parse(v); }
                catch { meta[k] = v.replace(/^"+|"+$/g,''); }
              });
              const rest = body.replace(m[0], '').trim();
              return { meta, rest };
            }
            async function findIssueByUid(uid) {
              const q = `repo:${context.repo.owner}/${context.repo.repo} in:body "seed-uid:${uid}" type:issue`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              return res.data.items.find(i => !i.pull_request) || null;
            }
            async function getProjectInfo(projectUrl) {
              const m = projectUrl?.match(/orgs\/([^/]+)\/projects\/(\d+)/);
              if (!m) return null;
              const [_, org, number] = m;
              const data = await github.graphql(`
                query($org:String!, $num:Int!) {
                  organization(login:$org){ projectV2(number:$num){ id } }
                }`, { org, num: parseInt(number,10) });
              return { projectId: data.organization.projectV2.id };
            }
            async function addIssueToProject(projectId, issueNumber) {
              const node = await github.graphql(`
                query($o:String!, $r:String!, $n:Int!){
                  repository(owner:$o, name:$r){ issue(number:$n){ id } }
                }`, { o: context.repo.owner, r: context.repo.repo, n: issueNumber });
              await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } }
                }`, { projectId, contentId: node.repository.issue.id });
            }

            const DEFAULT_PROJECT_URL = process.env.DEFAULT_PROJECT_URL || null;
            const DEFAULT_ASSIGNEE = process.env.DEFAULT_ASSIGNEE || '';
            const FALLBACK_ASSIGNEE = process.env.FALLBACK_ASSIGNEE || '';

            let projectInfo = null; // single Project for all seeds (by design)

            const created = []; // [{number, uid, meta, createdNew:true}]
            for (const f of files) {
              const raw = fs.readFileSync(f, 'utf8');
              const { meta, rest } = parseHeader(raw);

              const title = meta.title || path.basename(f);
              const labels = Array.isArray(meta.labels) ? meta.labels : (meta.labels ? [meta.labels] : []);
              const uid = meta.uid || null;

              // create-only defaults (hard)
              const mode = (meta.mode ?? 'create_only') + '';
              const frozen = String(meta.frozen ?? 'true') === 'true';
              const lifecycle = (meta.lifecycle ?? 'seed_only') + '';
              const createOnly = (mode === 'create_only') || frozen || (lifecycle === 'seed_only');

              if (!uid) {
                core.warning(`Seed ${f} missing 'uid'; skipping.`);
                continue;
              }

              // If an issue with this UID already exists → SKIP (create-only)
              const existing = await findIssueByUid(uid);
              if (existing && createOnly) {
                core.info(`Seed ${uid}: issue #${existing.number} exists → create-only SKIP`);
                continue;
              }

              // assignees: seed > DEFAULT_ASSIGNEE > actor > none
              let assignees = [];
              if (Array.isArray(meta.assignees)) assignees = meta.assignees;
              else if (meta.assignees) assignees = [meta.assignees];
              else if (DEFAULT_ASSIGNEE) assignees = [DEFAULT_ASSIGNEE];
              else if (FALLBACK_ASSIGNEE) assignees = [FALLBACK_ASSIGNEE];

              // project URL: seed value, else repo default, else no add
              const projectUrl = meta.project_url || DEFAULT_PROJECT_URL || null;

              const body = `${rest}\n\n<!-- seed-uid:${uid} -->`.trim();

              // CREATE
              const issue = (await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels,
                assignees
              })).data;

              // add to Project (optional)
              if (projectUrl) {
                if (!projectInfo) projectInfo = await getProjectInfo(projectUrl);
                if (projectInfo?.projectId) {
                  await addIssueToProject(projectInfo.projectId, issue.number)
                    .catch(e => core.warning(`Add to project failed for #${issue.number}: ${e.message}`));
                }
              }

              created.push({ number: issue.number, uid, meta, createdNew: true });
            }

            core.setOutput('created', JSON.stringify(created));

            # Wire relationships without violating create-only:
      # 1) If an EPIC was created in this run AND it declares children_uids → write its checklist now.
      # 2) If a CHILD was created in this run AND declares parent_uid → append one checklist line to the existing epic (idempotent).
      - name: Wire hierarchy (epic checklists + new child → existing epic)
        if: steps.create.outputs.created != ''
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const created = JSON.parse(core.getInput('created'));

            // utility: find an issue by 'seed-uid:...' marker
            async function findIssueByUid(uid) {
              const q = `repo:${context.repo.owner}/${context.repo.repo} in:body "seed-uid:${uid}" type:issue`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              return res.data.items.find(i => !i.pull_request) || null;
            }

            const byUid = Object.fromEntries(created.map(i => [i.uid, i]));

            // 1) Newly created epics: write their Children checklist (only once).
            for (const item of created) {
              const meta = item.meta || {};
              const children = meta.children_uids || [];
              if (!children.length) continue;

              // Only when epic itself was created in this run
              if (!item.createdNew) continue;

              const childNums = children.map(u => byUid[u]?.number).filter(Boolean);
              if (!childNums.length) continue;

              const issue = await github.rest.issues.get({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: item.number
              });

              const header = "## Children\n";
              const list = childNums.map(n => `- [ ] #${n}`).join('\n');
              const body = `${issue.data.body}\n\n${header}${list}\n`;

              await github.rest.issues.update({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: item.number, body
              });
            }

            // 2) Newly created children: append to existing epic by parent_uid (idempotent).
            for (const item of created) {
              const meta = item.meta || {};
              const parentUid = meta.parent_uid;
              if (!parentUid) continue;

              // find the epic by UID
              const parent = await findIssueByUid(parentUid);
              if (!parent) {
                core.warning(`Child #${item.number} declares parent_uid=${parentUid} but no epic found.`);
                continue;
              }

              // fetch current body to check duplication
              const parentIssue = await github.rest.issues.get({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: parent.number
              });

              const line = `- [ ] #${item.number}`;
              const header = "## Children";
              let body = parentIssue.data.body || "";

              // ensure header exists
              if (!body.includes(header)) {
                body = `${body}\n\n${header}\n${line}\n`;
              } else if (!body.includes(line)) {
                // insert line just after header or append to the existing list
                body = body.replace(/## Children[^\n]*\n((?:- \[ \] #[0-9]+\n)*)/m, (m, list) => {
                  return `## Children\n${list || ""}${line}\n`;
                });
              } else {
                continue; // already linked; skip
              }

              await github.rest.issues.update({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: parent.number, body
              });
            }
          created: ${{ steps.create.outputs.created }}

      - name: Open PR to consume processed seeds (pending → applied)
        if: steps.list.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const { execSync } = require('child_process');

            const files = core.getInput('files').split(',').filter(Boolean);
            if (!files.length) { core.info('No seeds to consume'); return; }

            const branch = `automation/consume-seeds-${Date.now()}`;
            execSync('git config user.name "github-actions[bot]"');
            execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync(`git checkout -b ${branch}`);
            for (const f of files) {
              const target = f.replace('/pending/', '/applied/');
              execSync(`mkdir -p "$(dirname "${target}")"`);
              execSync(`git mv "${f}" "${target}"`);
            }
            execSync('git add -A');
            execSync('git commit -m "chore(automation): consume processed seeds → applied/"');
            execSync(`git push --set-upstream origin ${branch}`);
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner, repo: context.repo.repo,
              head: branch, base: 'main',
              title: 'chore(automation): consume processed seeds → applied/',
              body: 'Move processed seeds from pending/ to applied/ to enforce create-only snapshots.'
            });
            core.notice(`Opened consume PR #${pr.data.number}`);
          files: ${{ steps.list.outputs.files }}
