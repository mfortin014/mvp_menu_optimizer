name: CI

on:
  pull_request:
    branches: [codex-phase1, main]
  push:
    branches: [codex-phase1]
  workflow_dispatch:

jobs:
  check:
    name: Lint & Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Ruff / Black / Isort (check only)
        run: |
          ruff check .
          black --check .
          isort --check-only .

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Unit tests
        run: pytest tests/unit -q

  smoke:
    name: Thin Smoke (staging)
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [check]
    # Use the staging environment so we can read its env secrets/vars
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # ---- Persist raw DB_* inputs (and light derived) into job env ----
      - name: Persist DB inputs to $GITHUB_ENV (no synthesis)
        shell: bash
        env:
          # Prefer environment VARIABLES (vars.*); fall back to SECRETS if not set
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID || secrets.SUPABASE_PROJECT_ID }}
          DB_HOST: ${{ vars.DB_HOST             || secrets.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT             || secrets.DB_PORT }}
          DB_NAME: ${{ vars.DB_NAME             || secrets.DB_NAME }}
          # Secrets
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          : "${DB_NAME:=postgres}"
          : "${DB_PORT:=5432}"

          # Derive DB_USER locally if not provided via environment
          DB_USER="${DB_NAME}.${SUPABASE_PROJECT_ID}"

          # Write ONLY to $GITHUB_ENV (never echo to stdout)
          {
            printf 'DB_HOST=%s\n' "$DB_HOST"
            printf 'DB_PORT=%s\n' "$DB_PORT"
            printf 'DB_NAME=%s\n' "$DB_NAME"
            printf 'DB_USER=%s\n' "$DB_USER"
            printf 'DB_PASSWORD=%s\n' "$DB_PASSWORD"
            # convenience for app/tests
            if [ -n "${SUPABASE_PROJECT_ID:-}" ]; then
              printf 'SUPABASE_URL=%s\n' "https://${SUPABASE_PROJECT_ID}.supabase.co"
            fi
          } >> "$GITHUB_ENV"

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      # ---- Smoke tests that rely on env (DATABASE_URL, SUPABASE_URL, etc.) ----
      - name: Smoke tests
        run: pytest tests/smoke -q
