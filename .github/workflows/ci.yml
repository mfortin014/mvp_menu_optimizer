name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # ---------------------------
  # Linting / Formatting
  # ---------------------------
  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Ruff (lint)
        run: ruff check . --output-format=github

      - name: Black (format check)
        run: black --check .

      - name: isort (import order check)
        run: isort . --check-only

  # ---------------------------
  # Thin syntax smoke
  # ---------------------------
  syntax:
    name: syntax
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Thin smoke â€” syntax compile
        run: |
          python - <<'PY'
          import os, sys, py_compile
          SKIP = {".git", ".venv", "venv", "node_modules", "docs", "schema", "backups", ".streamlit"}
          failures = []
          for root, dirs, files in os.walk("."):
              parts = set(root.split(os.sep))
              if SKIP & parts:
                  continue
              for f in files:
                  if f.endswith(".py"):
                      p = os.path.join(root, f)
                      try:
                          py_compile.compile(p, doraise=True)
                      except Exception as e:
                          failures.append((p, str(e)))
          if failures:
              for p, e in failures:
                  print(f"SMOKE compile failed: {p} :: {e}", file=sys.stderr)
              sys.exit(1)
          print("SMOKE: syntax OK")
          PY

  # ---------------------------
  # Unit tests (no secrets / no DB)
  # ---------------------------
  unit:
    name: unit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Unit tests
        run: pytest tests/unit -q

  # ---------------------------
  # Smoke tests (staging DB)
  # ---------------------------
  smoke-staging:
    name: smoke-staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, syntax, unit]
    environment: staging
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # ---- Persist raw DB_* inputs (and light derived) into job env ----
      - name: Persist DB inputs to $GITHUB_ENV (no synthesis)
        shell: bash
        env:
          # Prefer environment VARIABLES (vars.*); fall back to SECRETS if not set
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID || secrets.SUPABASE_PROJECT_ID }}
          DB_HOST: ${{ vars.DB_HOST             || secrets.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT             || secrets.DB_PORT }}
          DB_NAME: ${{ vars.DB_NAME             || secrets.DB_NAME }}
          # Secrets
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          : "${DB_NAME:=postgres}"
          : "${DB_PORT:=5432}"

          # Derive DB_USER locally if not provided via environment
          DB_USER="${DB_NAME}.${SUPABASE_PROJECT_ID}"

          # Write ONLY to $GITHUB_ENV (never echo to stdout)
          {
            printf 'DB_HOST=%s\n' "$DB_HOST"
            printf 'DB_PORT=%s\n' "$DB_PORT"
            printf 'DB_NAME=%s\n' "$DB_NAME"
            printf 'DB_USER=%s\n' "$DB_USER"
            printf 'DB_PASSWORD=%s\n' "$DB_PASSWORD"
            # convenience for app/tests
            if [ -n "${SUPABASE_PROJECT_ID:-}" ]; then
              printf 'SUPABASE_URL=%s\n' "https://${SUPABASE_PROJECT_ID}.supabase.co"
            fi
          } >> "$GITHUB_ENV"

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      # ---- Smoke tests that rely on env (DATABASE_URL, SUPABASE_URL, etc.) ----
      - name: Smoke tests
        run: pytest tests/smoke -q

  package-artifact:
    name: package-artifact
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, syntax, unit]
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build release archive
        run: |
          tar \
            --exclude='.git' \
            --exclude='.github/workflows/*.yml~' \
            --exclude='node_modules' \
            -czf streamlit-app.tar.gz .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: streamlit-app
          path: streamlit-app.tar.gz
          if-no-files-found: error

  deploy-staging:
    name: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [package-artifact]
    if: github.event_name == 'push'
    environment: staging

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: streamlit-app
          path: release

      - name: Extract artifact
        run: |
          mkdir -p release/src
          tar -xzf release/streamlit-app.tar.gz -C release/src

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        working-directory: release/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Persist DB inputs to $GITHUB_ENV (no synthesis)
        shell: bash
        working-directory: release/src
        env:
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID || secrets.SUPABASE_PROJECT_ID }}
          DB_HOST: ${{ vars.DB_HOST             || secrets.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT             || secrets.DB_PORT }}
          DB_NAME: ${{ vars.DB_NAME             || secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          : "${DB_NAME:=postgres}"
          : "${DB_PORT:=5432}"

          DB_USER="${DB_NAME}.${SUPABASE_PROJECT_ID}"

          {
            printf 'DB_HOST=%s\n' "$DB_HOST"
            printf 'DB_PORT=%s\n' "$DB_PORT"
            printf 'DB_NAME=%s\n' "$DB_NAME"
            printf 'DB_USER=%s\n' "$DB_USER"
            printf 'DB_PASSWORD=%s\n' "$DB_PASSWORD"
            if [ -n "${SUPABASE_PROJECT_ID:-}" ]; then
              printf 'SUPABASE_URL=%s\n' "https://${SUPABASE_PROJECT_ID}.supabase.co"
            fi
          } >> "$GITHUB_ENV"

      - name: Add repo root to PYTHONPATH
        working-directory: release/src
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Smoke tests (staging)
        working-directory: release/src
        run: pytest tests/smoke -q

  deploy-production:
    name: deploy-production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-staging]
    if: github.event_name == 'push'
    environment: production

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: streamlit-app
          path: release

      - name: Extract artifact
        run: |
          mkdir -p release/src
          tar -xzf release/streamlit-app.tar.gz -C release/src

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        working-directory: release/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Persist DB inputs to $GITHUB_ENV (no synthesis)
        shell: bash
        working-directory: release/src
        env:
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID || secrets.SUPABASE_PROJECT_ID }}
          DB_HOST: ${{ vars.DB_HOST             || secrets.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT             || secrets.DB_PORT }}
          DB_NAME: ${{ vars.DB_NAME             || secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          : "${DB_NAME:=postgres}"
          : "${DB_PORT:=5432}"

          DB_USER="${DB_NAME}.${SUPABASE_PROJECT_ID}"

          {
            printf 'DB_HOST=%s\n' "$DB_HOST"
            printf 'DB_PORT=%s\n' "$DB_PORT"
            printf 'DB_NAME=%s\n' "$DB_NAME"
            printf 'DB_USER=%s\n' "$DB_USER"
            printf 'DB_PASSWORD=%s\n' "$DB_PASSWORD"
            if [ -n "${SUPABASE_PROJECT_ID:-}" ]; then
              printf 'SUPABASE_URL=%s\n' "https://${SUPABASE_PROJECT_ID}.supabase.co"
            fi
          } >> "$GITHUB_ENV"

      - name: Add repo root to PYTHONPATH
        working-directory: release/src
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Smoke tests (production)
        working-directory: release/src
        run: pytest tests/smoke -q
