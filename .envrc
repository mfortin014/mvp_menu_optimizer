# .envrc — BWS is opt-in via pre-set token; VS Code owns venv activation

PROJECT_ID="4b5e71e8-c979-4125-acba-b37101280d71"  # paste the real UUID

# if bws isn’t on PATH, do nothing
command -v bws >/dev/null 2>&1 || { echo "[direnv] bws not found; skipping"; return; }

# if no token, do nothing (venv still active via VS Code)
if [ -z "${BWS_ACCESS_TOKEN:-}" ]; then
  echo "[direnv] No BWS token. To inject: export BWS_ACCESS_TOKEN=… && direnv reload"
  return
fi

# token present → inject all secrets (export KEY=VALUE)
if bws project list -o none >/dev/null 2>&1; then
  while IFS= read -r secret_line; do
    [ -z "$secret_line" ] && continue
    case "$secret_line" in
      \#*) continue ;;
    esac
    key=${secret_line%%=*}
    value=${secret_line#*=}
    printf -v "$key" '%s' "$value"
    export "$key"
  done < <(bws secret list "$PROJECT_ID" -o env)
  echo "[direnv] BWS injected: $(bws secret list "$PROJECT_ID" -o env | cut -d= -f1 | xargs)"
else
  echo "[direnv] BWS token invalid; skipping"
fi

# Derive SUPABASE_URL and DB_USER from SUPABASE_PROJECT_ID (+ DB_NAME)
if [ -n "${SUPABASE_PROJECT_ID:-}" ]; then
  export SUPABASE_URL="https://${SUPABASE_PROJECT_ID}.supabase.co"
  # DB_NAME defaults to postgres if not provided
  : "${DB_NAME:=postgres}"
  export DB_USER="${DB_NAME}.${SUPABASE_PROJECT_ID}"
fi

# Synthesize DATABASE_URL from DB_* if not set (with sslmode=require)
if [ -z "${DATABASE_URL:-}" ] \
   && [ -n "${DB_HOST:-}" ] \
   && [ -n "${DB_USER:-}" ] \
   && [ -n "${DB_PASSWORD:-}" ]; then
  export DATABASE_URL="$(
    python - <<'PY'
import os, urllib.parse
u=os.environ["DB_USER"]
p=os.environ["DB_PASSWORD"]
h=os.environ["DB_HOST"]
port=os.environ.get("DB_PORT","5432")
d=os.environ.get("DB_NAME","postgres")
url = f"postgresql://{u}:{urllib.parse.quote(p, safe='')}@{h}:{port}/{d}"
print(url + ("&sslmode=require" if "?" in url else "?sslmode=require"))
PY
  )"
  echo "[direnv] synthesized DATABASE_URL from DB_*"
fi
